#Understanding React
React components are class or a function that outputs an element tree. React components also take props as input.

A component instance is the running, active version of a component that manages its own state and lifecycle. When you use a component in your JSX, React creates an instance of that component to handle its rendering and behavior.Instances have their own state and lifecycle methods. 
In functional components, use props, state and hooks to control instance behavior. In class components, use predefined methods like compoenentDidMount(), componentWillUnmount(){built-in lifecycle methods} and this keyword.

Reconciliation -It is the process by which the framework keeps the user interface (UI) in sync with the underlying data (state). 
Virtual DOM: React maintains an in-memory representation of the real DOM called the virtual DOM. It's lightweight and faster to manipulate than the real DOM.

Diffing algorithm: Whenever there's a change in state, React creates a new virtual DOM representing the updated UI. The diffing algorithm compares the old and new virtual DOMs to identify the minimal set of changes needed in the real DOM.
Key Steps:- root comparison, key-based comparison, recursive comparison, change categorization{insert, update, delete, rearrange}
Longest Common Subsequence (LCS): This technique helps efficiently identify the largest unchanged portion of the tree, minimizing the number of updates needed.
Object.is() is used to compare previous and present objects.

event.preventDefault()
if we dont use the above command, on submitting the form details will get erased and the values will be added as quereis in the url like below
index.html?firstName=jane&lastName=kui&email=12344%40gmail.com&comments=kiuyt&isFriendly=on&employment=full-time&favColor=black

In javascript, functions are first-class citizens. The functions can be treated as any other values - you can assign a function to a variable, pass the function as an argument and return a function from another function.

#States
There are two ways to change the state of the variable, one way to directly pass the new value of the state to the setMeme function
When we need to refer to the previous value of the state, we pass a callback where we take the previous value and return the updated value.

If we pass a function to the React.usState function then that state renders only once and not every time the component gets rendered.

There are two ways of conditional rendering:
 1. Use {condition && (item to display)} - this is used in cases where to have to choose to display something or not based to the condition
 2. Use ternary operator - this is used when you have to choose between displaying one thing or other like you have two options to display based on the condition. If there are more than two options use if..else if
Only the && and ternary operator can be used directly in JSX, for if..else if and switch you need to create an object outside return()

#Hooks 
- useState, useEffect, useRef, useMemo, useCallback

Cleanup function is a return function inside the useEffect hooks and it runs when the (WindowTracker) component is dismounted (i.e. when we toggle Window Tracker to hide the content)

useRef hook - across re-renders the value of reference variable is not changing and the component re-renders on changing the state but not on changing the ref 

useEffect hooks-
Hooks like useEffect allow you to perform side effects such as making API calls, setting up subscriptions, or manipulating the DOM after the component renders or updates. The function it contains runs only after the User interface is printed on the screen. The second parameter is the dependencies array. It checks the new value of array to the previous value of array anf if it is different, it will run the callback in useEffect. If we keep it as empty it implies that the function will run only after first render. useEffect runs the function on change in dependencies array, it doesnot care how heavy the function it is. 
Whereas to optimise the function execution, we can use useCallback or useMemo.

useMemo hooks - they are used for memoization, which implies that is caches the expensive functions calls and reuses them the inputs to the function are same.
It has two parameters one is function and another is dependencies array. It re-runs the function only when one of the dependencies in the dependencies array changes. Thus, if there is change in the dependencies array, useMemo executes the function and returns the output value. 
Whereas in useCallback, if there is change in the dependencies array, it returns the function as it is without running it.

